fileName: '{{P}}Controller.ts'
content: |
  import { Request, Response } from 'express'
  import IController from './interface'
  {{[errh][import { handleResponseError } from './utils']}}

  class {{P}}Controller implements IController {
    constructor() {}

    async create(req: Request, res: Response) {
      try {
        
      } catch (e: any) {
        {{[errh][handleResponseError(res, e, 'Cannot create: ')]}}{{[!errh][console.error('Cannot create: ', e)
        res.status(500).json(e.message)]}}
      }
    }

    async getAll(req: Request, res: Response) {
      try {

      } catch (e: any) {
        {{[errh][handleResponseError(res, e, 'Cannot get all: ')]}}{{[!errh][console.error('Cannot create: ', e)
        res.status(500).json(e.message)]}}
      }
    }

    async getOnce(req: Request, res: Response) {
      try {

      } catch (e: any) {
        {{[errh][handleResponseError(res, e, 'Cannot get once: ')]}}{{[!errh][console.error('Cannot create: ', e)
        res.status(500).json(e.message)]}}
      }
    }

    async update(req: Request, res: Response) {
      try {

      } catch (e: any) {
        {{[errh][handleResponseError(res, e, 'Cannot update: ')]}}{{[!errh][console.error('Cannot create: ', e)
        res.status(500).json(e.message)]}}
      }
    }

    async delete(req: Request, res: Response) {
      try {

      } catch (e: any) {
        {{[errh][handleResponseError(res, e, 'Cannot delete: ')]}}{{[!errh][console.error('Cannot create: ', e)
        res.status(500).json(e.message)]}}
      }
    }
  }

  const {{C}}Controller = new {{P}}Controller()

  export default {{C}}Controller