fileName: utils.ts
content: |
  import { Response } from 'express'
  import { CustomError, CustomErrorDictionaryType } from '../utils/errorHandler'
  import { AuthMiddleware } from '../middlewares/AuthMiddleware'

  export const handleResponseError = (
    res: Response,
    e: CustomErrorDictionaryType | any,
    logPrefix?: string
  ) => {
    console.error(logPrefix || 'Unhandled controller error: ', e)
    const unknown = CustomError.GetUnknown()
    res.status(e.status || unknown.status).json(e.message || unknown.message)
  }

  export function AddRoute(
    path: string,
    method: 'all' | 'get' | 'post' | 'put' | 'delete' | 'patch' | 'options' | 'head',
    guard = false
  ) {
    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
      const getRouter = () => import('../router')
      const originalMethod = descriptor.value

      getRouter().then((obj) => {
        const router = obj.default

        descriptor.value = async function (req: Request, res: Response) {
          try {
            return await originalMethod.apply(target, [req, res])
          } catch (e: any) {
            handleResponseError(res, e, `Cannot ${method}. Error in method "${propertyKey}".`)
          }
        }

        if (guard) router[method](path, AuthMiddleware, descriptor.value)
        else router[method](path, descriptor.value)
        return descriptor
      })
    }
  }

  export function logDecorator(target: Function) {
    const keys = Object.getOwnPropertyNames(target.prototype)

    for (const [idx, propertyName] of keys.entries()) {
      if (idx === 0) continue
      const descriptor = Object.getOwnPropertyDescriptor(target.prototype, propertyName)

      if (descriptor && descriptor.value instanceof Function) {
        const originalMethod = descriptor.value

        descriptor.value = async function (...args: any[]) {
          console.log('method ' + propertyName + ' was called')
          const result = await originalMethod.apply(target, args)
          console.log('result is ' + result)
          return result
        }
        Object.defineProperty(target.prototype, propertyName, descriptor)
      }
    }
  }
